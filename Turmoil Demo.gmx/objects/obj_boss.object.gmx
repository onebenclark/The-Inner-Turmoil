<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
active = false;
moving = false;
has_shot = false;
dashing = false;
invincible = 0;
player_x=0;
player_y=0;
player_dist=0;
player_direct=0;
non_moving = 0;
image_speed = 0.27

x_move = 0;
y_move = 0;
action = 0;
moved = 0;
move_dist = 0;
misses = 0;
x_pos = 0;
y_pos = 0;
hp = 3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behavior
if( hp == 0 ){
    active = false;
    instance_create( room_width/2,room_height/2,obj_victory );
    global.victory = true;
}
if( global.blink ) exit;
player_x = obj_player.x-x;
player_y = obj_player.y-y;
player_dist = sqrt( ( player_x*player_x ) + ( player_y*player_y ) );
player_direct = arctan2( player_y, player_x );
if( invincible != 0 ) invincible--;

if( !active ) exit;

if( !moving ){
    if( action == 0 ) action = irandom_range( 1,2 );
    if( misses == 5 ) action = 4;
    if( non_moving == 2 ) action = 3
    switch( action ){
        case 1:
            if( abs( player_x ) &lt; abs( player_y ) ){
                if( !place_meeting(x+sign( player_x )*10,y,obj_solid) ){
                    move_dist = abs( player_x );
                    if( move_dist&lt;50 ) non_moving++;
                    else non_moving = 0;
                    x_move = sign( player_x )*10;
                    image_xscale = sign( player_x );
                    sprite_index = spr_boss_moving_side;
                    moving = true;
                    wait = 15;
                }else{
                    move_dist = abs( player_y );
                    if( move_dist&lt;50 ) non_moving++;
                    else non_moving = 0;
                    y_move = sign( player_y )*10;
                    if( y_move &gt; 0 ) sprite_index = spr_boss_moving_down;
                    else sprite_index = spr_boss_moving_up;
                    moving = true;
                    wait = 15;
                }
            }else if( abs( player_y ) &lt; abs( player_x ) ){
                if( !place_meeting(x,y+sign( player_y )*10,obj_solid) ){
                    move_dist = abs( player_y );
                    if( move_dist&lt;50 ) non_moving++;
                    else non_moving = 0;
                    y_move = sign( player_y )*10;
                    if( y_move &gt; 0 ) sprite_index = spr_boss_moving_down;
                    else sprite_index = spr_boss_moving_up;
                    moving = true;
                    wait = 15;
                }else{
                    move_dist = abs( player_x );
                    if( move_dist&lt;50 ) non_moving++;
                    else non_moving = 0;
                    x_move = sign( player_x )*10;
                    image_xscale = sign( player_x );
                    sprite_index = spr_boss_moving_side;
                    moving = true;
                    wait = 15;
                }
            }
            break;
        case 2:
            action = 0;
            
            break;
        case 3:
            dashing = true;
            moving = true;
            switch( sprite_index ){
                case spr_boss_up:
                    sprite_index = spr_boss_dash_up;
                    break;
                case spr_boss_down:
                    sprite_index = spr_boss_dash_down;
                    break;
                case spr_boss_side:
                    sprite_index = spr_boss_dash_side;
                    break;
            }
            if( abs( player_x ) &gt; abs( player_y ) ){
                x_move = sign( player_x )*30;
                move_dist = abs( player_x );
                
            }else{
                y_move = sign( player_y )*30;
                move_dist = abs( player_y );
                
            }
            break;
        case 4:
            sprite_index = spr_boss_slam;
            break;
    }
  
}else if( dashing ){
        if( moved&gt;=move_dist ){
            dashing = false;
            moving = false;
            moved = 0;
            x_move = 0;
            y_move = 0;
            non_moving = 0;
            action = 0;
            if( place_meeting( x,y,obj_player ) ) obj_player.hp--;
        }
        moved += abs( y_move ) + abs( x_move );
}else if( moved &lt; move_dist ){
        if( place_meeting( x+x_move,y,obj_solid ) ){
            moving = false;
            moved = 0; 
            x_move=0;
        }else if( place_meeting( x,y+y_move,obj_solid ) ){
            moving = false;
            moved = 0;
            y_move=0;
        }else{
            moved+=10;
        }
}else if( moved &gt;= move_dist ){
        x_move = 0;
        y_move = 0;
        switch( sprite_index ){
            case spr_boss_moving_up:
                sprite_index = spr_boss_up;
                break;
            case spr_boss_moving_down:
                sprite_index = spr_boss_down;
                break;
            case spr_boss_moving_side:
                sprite_index = spr_boss_side;
                break;
        }
        if( wait!=0 ){
            wait--;
        }else{
            if( player_direct &gt; -pi/4 and player_direct &lt; pi/4 ){
                sprite_index = spr_boss_throw_side;
                image_xscale = sign( player_x );
            }else if( player_direct &gt; (3*pi)/4 or player_direct &lt; -(3*pi)/4 ){
                sprite_index = spr_boss_throw_side;
                image_xscale = sign( player_x );
            }else if( player_direct &gt; 0 ){
                sprite_index = spr_boss_throw_down;
            }else{
                sprite_index = spr_boss_throw_up;
            }
            
        }
}

if( place_meeting( x,y,obj_player ) and obj_player.attacking and invincible == 0 ){
    hp--;
    invincible = 10;
}
if( place_meeting( x,y,obj_proj_boulder ) and sqrt( power(obj_proj_boulder.move[0],2)+power(obj_proj_boulder.move[1],2)) &gt; 40 and invincible == 0 ){
    hp--;
    invincible = 10;
}

x+=x_move;
y+=y_move;
if( y&lt;16 ) y = 16;
else if( y&gt;room_height-16 ) y = room_height-16;
if( x&lt;16 ) x = 16;
else if( x&gt;room_width-16 ) x = room_width-16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch( sprite_index ){
            case spr_boss_throw_up:
                wait  = 15;
                moved = 0;
                instance_create( x,y,obj_proj_boulder );
                moving = false;
                has_shot = true;
                action = 0;
                sprite_index = spr_boss_up;
                break;
            case spr_boss_throw_down:
                wait  = 15;
                moved = 0;
                instance_create( x,y,obj_proj_boulder );
                moving = false;
                has_shot = true;
                action = 0;
                sprite_index = spr_boss_down;
                break;
            case spr_boss_throw_side:
                wait  = 15;
                moved = 0;
                instance_create( x,y,obj_proj_boulder );
                moving = false;
                has_shot = true;
                action = 0;
                sprite_index = spr_boss_side;
                break;
            case spr_boss_slam:
                action = 0;
                misses = 0;
                with( obj_obstacle ) instance_destroy();
                obj_obstacle_gen.set = irandom( 3 );
                obj_obstacle_gen.done = false;
                break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
depth = 0;
draw_self();
depth = -101

for( i=0;i&lt;hp;i++ ){
    draw_sprite_ext( spr_boss_hp,0,room_width-50,25+(i*32),1,1,0,c_white,0.5 );
}

//draw_text( 100,100,misses );
/*
draw_text( 100,110,player_direct );
draw_text( 100,120,move_dist );
draw_text( 100,130,moved );
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
