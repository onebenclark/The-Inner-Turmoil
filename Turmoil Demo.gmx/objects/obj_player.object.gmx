<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
//Boolean flags
mobile = true;
attacking = false;
dashing = false;
dash_set = true;
dead = false;

//Player Input
move_vector[0] = 0;
move_vector[1] = 0;
move_norm = 0;
move_angle = 0;

dash_vector[0] = 0;
dash_vector[1] = 0;
dash_norm = 0;
dash_angle = 0;

//Non-input variables
cycle_count = 0;
attack_step = 0;
face = 0;
dash_size = 0;
dash_max = 100;
dash_count = 300;
image_speed = 0.26;
hp = 3;

//constants
spd = 10;

//globals
global.blink = false;
global.victory = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction
if( keyboard_check_pressed( vk_escape ) ) game_end();
if( global.victory ) exit;
//Checks if the player has died.
if( dead ) exit;
if( dash_count &lt; 300 ) dash_count+=3;
//Checks player health.
if( hp &lt;= 0 ){
    sprite_index = spr_player_death;
    dead = true;
}else if( dashing ){
    if( dash_size == dash_max ){
        dashing = false;
        dash_size = 0;
        
    }else if( !place_meeting( x+dash_vector[0]*20,y+dash_vector[1]*20,obj_solid ) ){
        x+=dash_vector[0]*20;
        y+=dash_vector[1]*20;
        dash_size += 20;
        
    }else if( !place_meeting( x+dash_vector[0]*20,y,obj_solid ) ){
        x+=dash_vector[0]*20;
        dash_size += 20;
        
    }else if( !place_meeting( x,y+dash_vector[1]*20,obj_solid ) ){
        y+=dash_vector[1]*20;
        dash_size += 20;
        
    }
//If player is mobile obj_player accepts input.
}else if( mobile ){
    
    //Checks if player used attack command.
    if( keyboard_check_pressed( vk_space ) ){
        image_speed = 1;
        attacking = true;
        mobile = false;
        sprite_index = scr_find_player_sprite( 'attacking',face );
        
    //Checks if player used blink command.
    }else if( keyboard_check_pressed( vk_control ) ){
        instance_create( x,y-100,obj_target );
        global.blink = true;
        mobile = false;
            
    }else{
        dashing = false;
        //Initial setting of move_vector based on player input.
        move_vector[0] = keyboard_check( ord( 'D' ) )-keyboard_check( ord( 'A' ) );
        move_vector[1] = keyboard_check( ord( 'S' ) )-keyboard_check( ord( 'W' ) );
        //Check if player is dashing
        if( keyboard_check_pressed( vk_shift ) and dash_count &gt; 0 ){
            if( move_vector[0] != 0 or move_vector[1] != 0 ){
                dash_vector[0] = move_vector[0];
                dash_vector[1] = move_vector[1];
                dash_count -= 100;
                dashing = true;
                if( dash_vector[0]*dash_vector[1] != 0 ){
                    dash_vector[0] *= DIAG_ADJ;
                    dash_vector[1] *= DIAG_ADJ;
            
                }
                face = scr_find_player_face( dash_vector[0],dash_vector[1],face );
                if( dash_vector[0] != 0 ) image_xscale = sign( dash_vector[0] );
                sprite_index = scr_find_player_sprite( 'dashing',face );
            }
        }else{
            //Sets the direct player is facing and sprite.
            face = scr_find_player_face( move_vector[0],move_vector[1],face );
            if( move_vector[0] != 0 ) image_xscale = sign( move_vector[0] );
            sprite_index = scr_find_player_sprite( 'moving',face );
            
            //Checks for collisions.
            if( place_meeting( x+move_vector[0]*spd,y+move_vector[1]*spd,obj_solid ) ){
                if( place_meeting( x,y+move_vector[1]*spd,obj_solid ) ){
                    move_vector[1] = 0;
            
                }
                if( place_meeting( x+move_vector[0]*spd,y,obj_solid ) ){
                    move_vector[0] = 0;
                    
                }
            
            }else if( place_meeting( x,y+move_vector[1]*spd,obj_solid ) ){
                move_vector[1] = 0;
            
            }else if( place_meeting( x+move_vector[0]*spd,y,obj_solid ) ){
                move_vector[0] = 0;
            //Compensates for diagonal movement by multiplying move_vector by 1/sqrt(2).
            }else if( move_vector[0]*move_vector[1] != 0 ){
                move_vector[0] *= DIAG_ADJ;
                move_vector[1] *= DIAG_ADJ;
                
            }else if( move_vector[0] = 0 and move_vector[1] = 0 ){
                sprite_index = scr_find_player_sprite( 'idle',face );
            }
            //Applies movement.
            y += move_vector[1]*spd;
            x += move_vector[0]*spd;
        }
    }
    
}


/*
if( gamepad_button_check_pressed( 0,gp_select ) ) game_end();
if( gamepad_button_check_pressed( 0,gp_start ) ) game_restart();

if( hp &lt;= 0 ){
    mobile = false;
    image_speed = 0.26;
    sprite_index = spr_player_death;
    dead = true;
}
if( dashing ){
    if( dash_size == dash_max ){
        mobile = true;
        dashing = false;
        dash_size = 0;
    }else if( !place_meeting( x+dash_vector[0]*20,y+dash_vector[1]*20,obj_solid ) ){
        x+=dash_vector[0]*20;
        y+=dash_vector[1]*20;
        dash_size += 20;
    }else if( !place_meeting( x+dash_vector[0]*20,y,obj_solid ) ){
        x+=dash_vector[0]*20;
        dash_size += 20;
    }else if( !place_meeting( x,y+dash_vector[1]*20,obj_solid ) ){
        y+=dash_vector[1]*20;
        dash_size += 20;
    }

}else if( attacking ){
    if( gamepad_button_check_pressed( 0,gp_face1 ) and attack_step = 0 ){
        if( cycle_count &lt; 6 ) attack_step = 1;
        else if( cycle_count &lt;= 9 ) attack_step = 2;
    }
    cycle_count++;
    if( cycle_count == 9 ){
        if( attack_step == 0 ){
            attacking = false;
            mobile = true;
            cycle_count = 0;
            if( face == 0 ) sprite_index = spr_side;
            else if( face == 1 ) sprite_index = spr_down;
            else if( face == 2 ) sprite_index = spr_up;
        }else if( attack_step == 1 ){
            sprite_index = spr_attack_about;
            attack_step = 0;
            cycle_count = 0;
        }else{
            sprite_index = spr_attack_about2;
            attack_step = 0;
            cycle_count = 0;
        }
    }
    
}else if( mobile ){
    if( gamepad_button_check( 0,gp_face1 ) ) {
        image_speed = 1;
        attacking = true;
        mobile = false;
        if( sprite_index == spr_moving_side or sprite_index == spr_side ){
            sprite_index = spr_attack_side;
            face = 0;
        }else if( sprite_index == spr_moving_down or sprite_index == spr_down ){
            sprite_index = spr_attack_down;
            face = 1;
        }else if( sprite_index == spr_moving_up or sprite_index == spr_up ){
            sprite_index = spr_attack_up;
            face = 2;
        }
        
    }else if( gamepad_button_check_pressed( 0,gp_shoulderlb ) ){
        global.blink = true;
        mobile = false;
        instance_create( x,y-100,obj_target );
    
    }else{
        dash_vector[0] = gamepad_axis_value( 0, gp_axisrh );
        dash_vector[1] = gamepad_axis_value( 0, gp_axisrv );
        dash_norm = sqrt( dash_vector[0]*dash_vector[0]+dash_vector[1]*dash_vector[1] );
        dash_angle = abs( arctan2( dash_vector[1],dash_vector[0] ) );
        if( dash_count &lt; 300 ) dash_count += 3;
        if( dash_norm &lt; .25 and dash_count &gt; 100 ) dash_set = true;
        if( dash_norm &gt; .75 and dash_set ){
            dashing = true;
            dash_set = false;
            mobile = false;
            dash_count -= 100;
            image_xscale = sign( dash_vector[0] );
            if( dash_angle&gt;.875*pi or dash_angle&lt;=.125*pi ){
                dash_vector[0] = sign( dash_vector[0] );
                dash_vector[1] = 0;
                sprite_index = spr_moving_side;
            }else if( dash_angle&lt;=.625*pi and dash_angle&gt;.375*pi ){
                dash_vector[0] = 0;
                dash_vector[1] = sign( dash_vector[1] );
                if( dash_vector[1] &gt; 0 ) sprite_index = spr_moving_down;
                else sprite_index = spr_moving_up;
            }else{
                move_vector[0] = sign( move_vector[0] )*DIAG_ADJ;
                move_vector[1] = sign( move_vector[1] )*DIAG_ADJ;
            }
        
        }else{
            move_vector[0] = gamepad_axis_value( 0, gp_axislh );
            move_vector[1] = gamepad_axis_value( 0, gp_axislv );
            move_norm = sqrt( move_vector[0]*move_vector[0]+move_vector[1]*move_vector[1] );
            move_angle = abs( arctan2( move_vector[1],move_vector[0] ) );    
            if( move_norm &gt; .25 ){
                image_xscale = sign( move_vector[0] );
                if( move_angle&gt;.875*pi or move_angle&lt;=.125*pi ){
                    move_vector[0] = sign( move_vector[0] );
                    move_vector[1] = 0;
                    sprite_index = spr_moving_side;
                }else if( move_angle&lt;=.625*pi and move_angle&gt;.375*pi ){
                    move_vector[0] = 0;
                    move_vector[1] = sign( move_vector[1] );
                    if( move_vector[1] &gt; 0 ) sprite_index = spr_moving_down;
                    else sprite_index = spr_moving_up;
                }else{
                    move_vector[0] = sign( move_vector[0] )*DIAG_ADJ;
                    move_vector[1] = sign( move_vector[1] )*DIAG_ADJ;
                }
                if( !place_meeting( x+move_vector[0]*spd,y+move_vector[1]*spd,obj_solid ) ){
                    x+=move_vector[0]*spd;
                    y+=move_vector[1]*spd;
                }else if( !place_meeting( x+move_vector[0]*spd,y,obj_solid ) ){
                    x+=move_vector[0]*spd;
                }else if( !place_meeting( x,y+move_vector[1]*spd,obj_solid ) ){
                    y+=move_vector[1]*spd;
                }
            }else{
                if( sprite_index == spr_moving_side ) sprite_index = spr_side;
                else if( sprite_index == spr_moving_down ) sprite_index = spr_down;
                else if( sprite_index == spr_moving_up )  sprite_index = spr_up;
            }
        }
    }
}
if( y &lt; 0 ) y = 16;
else if( y &gt; room_height ) y = room_height-16;
if( x &lt; 0 ) x = 16;
else if( x &gt; room_width ) x = room_width-16 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( attacking ){
    image_speed = 0.26;
    attacking = false;
    mobile = true;
    if( face == 0 ) sprite_index = spr_side;
    else if( face == 1 ) sprite_index = spr_down;
    else if( face == 2 ) sprite_index = spr_up;
}
if( sprite_index == spr_player_death ){
    sprite_index = spr_dead;
    image_speed = 0;
    instance_create( room_width/2,room_height/2,obj_death );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw character and GUI
depth = 0;

draw_self();
depth = -1;

for( i=0;i&lt;hp;i++ ){
    draw_sprite_ext( spr_hp,0,25,25+(i*32),1,1,0,c_white,0.5 );
}
for( i=0;i&lt;(dash_count div 100);i++ ){
    draw_sprite_ext( spr_stam,0,57,25+(i*32),1,1,0,c_white,0.5 );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
